#! /usr/bin/perl -sW

# We are going to read the build file (a log of the source package building)
# in slurp mode, then we will check each possible error (not exhaustively)
# detected by lintian (a tool that checks if the package is conform with
# Debian policy) and correct the package building configuration files 
# accordingly.

use strict;

if(our$h) {
    print "correct_lintian [-l] [-s] source_build_log\n\nDescritpion:\n\tCorrects the debian folder built by dh_make using the .build file\n\tgenerated by 'debuild -S' command.\n\nOptions:\n";
    print "\t-l:\t enable if you are building a library.\n";
    print "\t-s:\t enable if you are building binaries in a single package.\n";
    exit 0;
}

my$buildfilename = shift;
open BUILDLOG, $buildfilename;
$/ = undef;
my$log = <BUILDLOG>;    # the entire building log

$log =~ m/Now running lintian\.\.\.\n(.*)\nFinished running lintian/s;
my$lintianLog = $1;  # the lintian part of the log

# Opening configuration files
open CONTROL, "debian/control" or die($!);
my$control = <CONTROL>;
close CONTROL;

# Matching errors and correcting
if ( $lintianLog =~ /package-needs-versioned-debhelper-build-depends (.)/ ) {
    my$dh_version = $1;
    $control =~ s/debhelper \(.*\)/debhelper \(>= $dh_version\)/;
}
if ( $lintianLog =~ /out-of-date-standards-version \d\.\d\.\d \(current is (\d\.\d\.\d)\)/ ) {
    my$std_version = $1;
    $control =~ s/Standards-Version: \d\.\d\.\d/Standards-Version: $std_version/;
}
if ( $lintianLog =~ /debhelper-but-no-misc-depends/ ) {
    $control =~ s/(Package:.*-dev[\s]+Section:.*?[\s]+Architecture:.*?[\s]+Depends:.*?)([\s]*Desc)/$1, \${misc:Depends}$2/s;
}
if ( $lintianLog =~ /bad-homepage/ ) {
    $control =~ s/(Homepage: )<.*?>/$1$ENV{HOMEPAGE}/;
}


# Writing in files
open CONTROL, ">", "debian/control" or die($!);
print CONTROL $control;

# Closing files
close CONTROL;
close BUILDLOG;
